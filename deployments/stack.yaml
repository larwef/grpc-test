AWSTemplateFormatVersion: 2010-09-09

# Set up resources for testing. Use Cloudformation for easy set up an tear down.

Parameters:
  VpcCIDR:
    Type: String
    Default: 10.0.0.0/16

  PublicSubnetCIDR:
    Type: String
    Default: 10.0.1.0/24

  ClusterName:
    Type: String
    Default: grpcCluster

  ImageId:
    Type: String
    Default: ami-0b8e62ddc09226d0a

  KeyName:
    Type: String
    Default: MyEC2KeyPair

  SpotFleetMinCapacity:
    Type: String
    Default: 1

  SpotFleetMaxCapacity:
    Type: String
    Default: 2

  LogGroupName:
    Type: String
    Default: grpc-test/server

  ServerDesiredCount:
    Type: Number
    Default: 1

Resources:
  # VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC
  
  # Public subnet
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
        VpcId: !Ref VPC
        AvailabilityZone: !Select [ 1, !GetAZs ]
        CidrBlock: !Ref PublicSubnetCIDR
        MapPublicIpOnLaunch: true

  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet

  # Security Groups
  PublicSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Security group for the public subnet
      SecurityGroupIngress:
        - Description: SSH Access
          CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 22
          ToPort: 22
  
  # IAM
  EC2SpotFleetRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: spotfleet.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2SpotFleetRole
        - arn:aws:iam::aws:policy/service-role/AmazonEC2SpotFleetTaggingRole
      Path: /

  ECSInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
      Path: /

  ECSInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref ECSInstanceRole

  # ECS
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
        ClusterName: !Ref ClusterName

  SpotFleet:
    Type: AWS::EC2::SpotFleet
    Properties:
      SpotFleetRequestConfigData:
        AllocationStrategy: lowestPrice
        ExcessCapacityTerminationPolicy: default
        IamFleetRole: !GetAtt EC2SpotFleetRole.Arn
        SpotPrice: 0.01
        TargetCapacity: !Ref SpotFleetMaxCapacity
        TerminateInstancesWithExpiration: true
        LaunchSpecifications:
          - BlockDeviceMappings:
            # Volume used by docker. Accessed directly by docker. Does not need to be mounted.
            # By default you get a 22GiB volume, this is just an override.
            - DeviceName: /dev/xvdcz
              Ebs:
                Encrypted: true
                VolumeSize: 25
                VolumeType: gp2
            EbsOptimized: false
            IamInstanceProfile:
              Arn: !GetAtt ECSInstanceProfile.Arn
            ImageId: !Ref ImageId
            InstanceType: t2.micro
            KeyName: !Ref KeyName
            Monitoring:
              Enabled: true
            SecurityGroups:
              - GroupId: !Ref PublicSecurityGroup
            SubnetId: !Ref PublicSubnet
            TagSpecifications:
              - ResourceType: instance
                Tags:
                  - Key: Name
                    Value: !Ref ClusterName
            UserData:
              Fn::Base64:
                !Sub |
                  #!/bin/bash
                  echo ECS_CLUSTER=${ClusterName} >> /etc/ecs/ecs.config
          - BlockDeviceMappings:
            # Volume used by docker. Accessed directly by docker. Does not need to be mounted.
            # By default you get a 22GiB volume, this is just an override.
            - DeviceName: /dev/xvdcz
              Ebs:
                Encrypted: true
                VolumeSize: 25
                VolumeType: gp2
            EbsOptimized: false
            IamInstanceProfile:
              Arn: !GetAtt ECSInstanceProfile.Arn
            ImageId: !Ref ImageId
            InstanceType: t2.small
            KeyName: !Ref KeyName
            Monitoring:
              Enabled: true
            SecurityGroups:
              - GroupId: !Ref PublicSecurityGroup
            SubnetId: !Ref PublicSubnet
            TagSpecifications:
              - ResourceType: instance
                Tags:
                  - Key: Name
                    Value: !Ref ClusterName
            UserData:
              Fn::Base64:
                !Sub |
                  #!/bin/bash
                  echo ECS_CLUSTER=${ClusterName} >> /etc/ecs/ecs.config
          - BlockDeviceMappings:
            # Volume used by docker. Accessed directly by docker. Does not need to be mounted.
            # By default you get a 22GiB volume, this is just an override.
            - DeviceName: /dev/xvdcz
              Ebs:
                Encrypted: true
                VolumeSize: 25
                VolumeType: gp2
            EbsOptimized: false
            IamInstanceProfile:
              Arn: !GetAtt ECSInstanceProfile.Arn
            ImageId: !Ref ImageId
            InstanceType: a1.medium
            KeyName: !Ref KeyName
            Monitoring:
              Enabled: true
            SecurityGroups:
              - GroupId: !Ref PublicSecurityGroup
            SubnetId: !Ref PublicSubnet
            TagSpecifications:
              - ResourceType: instance
                Tags:
                  - Key: Name
                    Value: !Ref ClusterName
            UserData:
              Fn::Base64:
                !Sub |
                  #!/bin/bash
                  echo ECS_CLUSTER=${ClusterName} >> /etc/ecs/ecs.config

  # GRPC Test Service
  GrpcTestServerLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Ref LogGroupName

  GrpcTestServerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: [
                  "logs:CreateLogGroup",
                  "logs:CreateLogStream",
                  "logs:PutLogEvents",
                  "logs:DescribeLogStreams"
                ]
                Resource: !GetAtt GrpcTestServerLogGroup.Arn

  GrpcTestServerTask:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: grpc-test-server
      NetworkMode: bridge
      TaskRoleArn: !GetAtt GrpcTestServerRole.Arn
      ContainerDefinitions:
        - Name: grpc-test-server
          Cpu: 256
          Environment:
            - Name: serverId
              Value: server1
          Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/grpc-test
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroupName
              awslogs-region: !Sub ${AWS::Region}
          Memory: 2048 # Hard limit
          MemoryReservation: 512 # Soft limit
          PortMappings:
            - ContainerPort: 8080
              HostPort: 8080
              Protocol: tcp
          Privileged: false
            
  GrpcTestServerService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !GetAtt ECSCluster.Arn
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
      DesiredCount: !Ref ServerDesiredCount
      LaunchType: EC2
      TaskDefinition: !Ref GrpcTestServerTask
