AWSTemplateFormatVersion: 2010-09-09

# Set up resources for testing. Use Cloudformation for easy set up an tear down.

Parameters:
  CertificateARN:
    Description: ARN for certificate set up in ACM. The certificate should be valid for the domain when setting up a record in Route 53.
    Type: String

  HostedZoneID:
    Description: The hosted zone to put the record set for the loadbalancer.
    Type: String

  RecordSetName:
    Description: Domain name for alias record set tied to the load balancer. Eg. "grpc.mydomain.com".
    Type: String

  VpcCIDR:
    Type: String
    Default: 10.0.0.0/16

  PublicSubnet1CIDR:
    Type: String
    Default: 10.0.1.0/24

  PublicSubnet2CIDR:
    Type: String
    Default: 10.0.2.0/24

  PublicSubnet3CIDR:
    Type: String
    Default: 10.0.3.0/24

  SSHAccessCIDR:
    Description: SSH access to instances in ECS cluster for debugging purpose.
    Type: String
    Default: 0.0.0.0/0

  ClusterName:
    Type: String
    Default: grpcCluster

  ImageId:
    Type: String
    Default: ami-0b8e62ddc09226d0a

  KeyName:
    Type: String
    Default: MyEC2KeyPair

  SpotFleetMinCapacity:
    Type: String
    Default: 1

  SpotFleetMaxCapacity:
    Type: String
    Default: 3

  LogGroupName:
    Type: String
    Default: grpc-test/server

  ServerDesiredCount:
    Type: Number
    Default: 2

  GrpcTestServerVersion:
    Type: String
    Default: latest

  GrpcTestServerPort:
    Type: Number
    Default: 8080

Resources:
  # VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC
  
  # Public subnet
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
        VpcId: !Ref VPC
        AvailabilityZone: !Select [ 0, !GetAZs ]
        CidrBlock: !Ref PublicSubnet1CIDR
        MapPublicIpOnLaunch: true
  
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
        VpcId: !Ref VPC
        AvailabilityZone: !Select [ 1, !GetAZs ]
        CidrBlock: !Ref PublicSubnet2CIDR
        MapPublicIpOnLaunch: true
  
  PublicSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
        VpcId: !Ref VPC
        AvailabilityZone: !Select [ 2, !GetAZs ]
        CidrBlock: !Ref PublicSubnet3CIDR
        MapPublicIpOnLaunch: true

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  PublicSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet3

  # NLB
  PublicNLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      LoadBalancerAttributes:
        - Key: load_balancing.cross_zone.enabled
          Value: true
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
        - !Ref PublicSubnet3
      Type: network

  # IAM
  EC2SpotFleetRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: spotfleet.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2SpotFleetRole
        - arn:aws:iam::aws:policy/service-role/AmazonEC2SpotFleetTaggingRole
      Path: /

  ECSInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
      Path: /

  ECSInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref ECSInstanceRole

  # ECS
  ECSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Security group for the public subnet
      SecurityGroupIngress:
        - Description: SSH Access
          CidrIp: !Ref SSHAccessCIDR
          IpProtocol: tcp
          FromPort: 22
          ToPort: 22

  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
        ClusterName: !Ref ClusterName

  SpotFleet:
    Type: AWS::EC2::SpotFleet
    Properties:
      SpotFleetRequestConfigData:
        AllocationStrategy: diversified
        ExcessCapacityTerminationPolicy: default
        IamFleetRole: !GetAtt EC2SpotFleetRole.Arn
        SpotPrice: 0.05
        TargetCapacity: !Ref SpotFleetMaxCapacity
        TerminateInstancesWithExpiration: true
        LaunchSpecifications:
          - BlockDeviceMappings:
            # Volume used by docker. Accessed directly by docker. Does not need to be mounted.
            # By default you get a 22GiB volume, this is just an override.
            - DeviceName: /dev/xvdcz
              Ebs:
                Encrypted: true
                VolumeSize: 25
                VolumeType: gp2
            EbsOptimized: false
            IamInstanceProfile:
              Arn: !GetAtt ECSInstanceProfile.Arn
            ImageId: !Ref ImageId
            InstanceType: t2.micro
            KeyName: !Ref KeyName
            Monitoring:
              Enabled: true
            SecurityGroups:
              - GroupId: !Ref ECSSecurityGroup
            SubnetId: !Join [",", [!Ref PublicSubnet1, !Ref PublicSubnet2, !Ref PublicSubnet3]]
            TagSpecifications:
              - ResourceType: instance
                Tags:
                  - Key: Name
                    Value: !Ref ClusterName
            UserData:
              Fn::Base64:
                !Sub |
                  #!/bin/bash
                  echo ECS_CLUSTER=${ClusterName} >> /etc/ecs/ecs.config
          - BlockDeviceMappings:
            # Volume used by docker. Accessed directly by docker. Does not need to be mounted.
            # By default you get a 22GiB volume, this is just an override.
            - DeviceName: /dev/xvdcz
              Ebs:
                Encrypted: true
                VolumeSize: 25
                VolumeType: gp2
            EbsOptimized: false
            IamInstanceProfile:
              Arn: !GetAtt ECSInstanceProfile.Arn
            ImageId: !Ref ImageId
            InstanceType: t2.small
            KeyName: !Ref KeyName
            Monitoring:
              Enabled: true
            SecurityGroups:
              - GroupId: !Ref ECSSecurityGroup
            SubnetId: !Join [",", [!Ref PublicSubnet1, !Ref PublicSubnet2, !Ref PublicSubnet3]]
            TagSpecifications:
              - ResourceType: instance
                Tags:
                  - Key: Name
                    Value: !Ref ClusterName
            UserData:
              Fn::Base64:
                !Sub |
                  #!/bin/bash
                  echo ECS_CLUSTER=${ClusterName} >> /etc/ecs/ecs.config
          - BlockDeviceMappings:
            # Volume used by docker. Accessed directly by docker. Does not need to be mounted.
            # By default you get a 22GiB volume, this is just an override.
            - DeviceName: /dev/xvdcz
              Ebs:
                Encrypted: true
                VolumeSize: 25
                VolumeType: gp2
            EbsOptimized: false
            IamInstanceProfile:
              Arn: !GetAtt ECSInstanceProfile.Arn
            ImageId: !Ref ImageId
            InstanceType: a1.medium
            KeyName: !Ref KeyName
            Monitoring:
              Enabled: true
            SecurityGroups:
              - GroupId: !Ref ECSSecurityGroup
            SubnetId: !Join [",", [!Ref PublicSubnet1, !Ref PublicSubnet2, !Ref PublicSubnet3]]
            TagSpecifications:
              - ResourceType: instance
                Tags:
                  - Key: Name
                    Value: !Ref ClusterName
            UserData:
              Fn::Base64:
                !Sub |
                  #!/bin/bash
                  echo ECS_CLUSTER=${ClusterName} >> /etc/ecs/ecs.config

  # GRPC Test Service
  GrpcTestServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Security group for grpc server task
      SecurityGroupIngress:
        - CidrIp: !Ref VpcCIDR
          IpProtocol: -1

  GrpcTestServerLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Ref LogGroupName

  GrpcTestServerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: [
                  "logs:CreateLogGroup",
                  "logs:CreateLogStream",
                  "logs:PutLogEvents",
                  "logs:DescribeLogStreams"
                ]
                Resource: !GetAtt GrpcTestServerLogGroup.Arn

  GrpcTestServerTask:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: grpc-test-server
      NetworkMode: awsvpc
      TaskRoleArn: !GetAtt GrpcTestServerRole.Arn
      ContainerDefinitions:
        - Name: grpc-test-server
          Cpu: 256
          Environment:
            - Name: port
              Value: !Ref GrpcTestServerPort
          Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/go-grpc-test-server:${GrpcTestServerVersion}
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroupName
              awslogs-region: !Sub ${AWS::Region}
          Memory: 512 # Hard limit
          MemoryReservation: 256 # Soft limit
          PortMappings:
            - ContainerPort: !Ref GrpcTestServerPort
              HostPort: !Ref GrpcTestServerPort
              Protocol: tcp
          Privileged: false

  GrpcTestServerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPort: traffic-port
      HealthCheckProtocol: TCP
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 3
      Port: !Ref GrpcTestServerPort
      Protocol: TCP
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 30
      UnhealthyThresholdCount: 3
      TargetType: ip
      VpcId: !Ref VPC

  GrpcTestServerListener:
    DependsOn: GrpcTestServerTargetGroup
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Certificates:
        - CertificateArn: !Ref CertificateARN
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref GrpcTestServerTargetGroup
      LoadBalancerArn: !Ref PublicNLB
      Port: !Ref GrpcTestServerPort
      Protocol: TLS

  GrpcTestServerService:
    DependsOn: GrpcTestServerListener
    Type: AWS::ECS::Service
    Properties:
      Cluster: !GetAtt ECSCluster.Arn
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
      DesiredCount: !Ref ServerDesiredCount
      LaunchType: EC2
      LoadBalancers:
        - ContainerName: grpc-test-server
          ContainerPort: !Ref GrpcTestServerPort
          TargetGroupArn: !Ref GrpcTestServerTargetGroup
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - !Ref GrpcTestServerSecurityGroup
          Subnets:
            - !Ref PublicSubnet1
            - !Ref PublicSubnet2
            - !Ref PublicSubnet3
      TaskDefinition: !Ref GrpcTestServerTask

  GrpcEndpointRecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      AliasTarget:
        DNSName: !GetAtt PublicNLB.DNSName
        EvaluateTargetHealth: false
        HostedZoneId: !GetAtt PublicNLB.CanonicalHostedZoneID
      HostedZoneId: !Ref HostedZoneID
      Name: !Join ["", [!Ref RecordSetName, .]]
      Type: A
